{
	// Place your atcoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"imports": {
		"prefix": "imports",
		"body": [
			"# -*- coding: utf-8 -*-",
			"import math",
			"import heapq",
			"import itertools",
			"from collections import deque",
			"import sys",
			"sys.setrecursionlimit(1000000)",
			"MOD = 10 ** 9 + 7",
			"INF = 10 ** 10",
		]
	},
	"input_s": {
		"prefix": "input_s",
		"body": [
			"s = input()"
		]
	},
	"input_n": {
		"prefix": "input_n",
		"body": [
			"n = int(input())"
		]
	},
	"input_n_m": {
		"prefix": "input_n_m",
		"body": [
			"n, m = map(int, input().split())"
		]
	},
	"input_l_r": {
		"prefix": "input_l_r",
		"body": [
			"l, r = map(int, input().split())"
		]
	},
	"input_h_w": {
		"prefix": "input_h_w",
		"body": [
			"h, w = map(int, input().split())"
		]
	},
	"input_list_a": {
		"prefix": "input_list_a",
		"body": [
			"a = list(map(int, input().split()))"
		]
	},
	"print_ans": {
		"prefix": "print_ans",
		"body": [
			"print(ans)"
		]
	},
	"cmb_on_mod": {
		"prefix": "cmb_on_mod",
		"body": [
			"def cmb(n, r, MOD):",
			"	A = 1",
			"	B = 1",
			"	for i in range(1, r + 1):",
			"		A = A * (n - i + 1) % MOD",
			"		B = B * i % MOD",
			"	return (A * pow(B, MOD - 2, MOD)) % MOD",
		]
	},
	"factorization": {
		"prefix": "factorization",
		"body": [
			"def factorization(n):",
			"	arr = []",
			"	temp = n",
			"	for i in range(2, int(-(-n**0.5//1))+1):",
			"		if temp%i==0:",
			"			cnt=0",
			"			while temp%i==0:",
			"				cnt+=1",
			"				temp //= i",
			"			arr.append([i, cnt])",
			"",
			"	if temp!=1:",
			"		arr.append([temp, 1])",
			"",
			"	if arr==[]:",
			"		arr.append([n, 1])",
			"",
			"	return arr"
		]
	},
	"power_func_on_mod": {
		"prefix": "power_func_on_mod",
		"body": [
			"def power_func_on_mod(base, sholder, mod):",
			"	bi = str(format(sholder, 'b'))  # 2進表現に",
			"	res = 1",
			"	for i in range(len(bi)):",
			"		res = (res * res) % mod",
			"		if bi[i] == '1':",
			"			res = (res * base) % mod",
			"	return res",
		]
	},
}